# 2-matrix_divided.txt

Usage of 2-matrix_divided.py
==============================

This module defines a matrix division function ``matrix_divided(matrix, div)``.


``matrix_divided(...)`` returns a new matrix that is a copy of the parameter
``matrix`` with all elements divided by ``div``.

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [
    ...     [2, 6, 8],
    ...     [12, 15, 18]
    ... ]
    >>> print(matrix_divided(matrix, 2))
    [[1.0, 3.0, 4.0], [6.0, 7.5, 9.0]]


The resulting quotients are rounded to a maximum of two decimal places.

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, 4))
    [[0.25, 0.5, 0.75], [1.0, 1.25, 1.5]]


The original matrix is left unchanged.

    >>> print(matrix)
    [[1, 2, 3], [4, 5, 6]


The function accept combination of both Integers and floats.

    >>> matrix = [
    ...     [1, -2.2, 3, 4.4, 5],
    ...     [-6.6, 7.00, 8, 9.999, 10]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, -0.73, 1.0, 1.47, 1.67], [-2.2, 2.33, 2.67, 3.33, 3.33]]


The function can also handle floating-point data type.

    >>> matrix = [
    ...     [1.1, -2.2, 3.3],
    ...     [4.4, 5.5, -6.6]
    ... ]
    >>> print(matrix_divided(matrix, 2))
    [[0.55, -1.1, 1.65], [2.2, 2.75, -3.3]]


Invalid Matrices
================

The parameter ``matrix`` must be a list of lists consisting of either integers
or floats. If ``matrix`` is not a list, a TypeError is raised.

    >>> matrix = "not a list"
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats


    >>> matrix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats


An empty list will raise TypeError.

    >>> matrix = []
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats


An empty list of lists will be processed.

    >>> matrix = [[]]
    >>> print(matrix_divided(matrix, 3))
    [[]]


A TypeError is raised if ``matrix`` is not specifically a list of
lists.

    >>> matrix = [1, 2, 3]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats


The same TypeError is raised yet again if any elements in ``matrix`` are
not integers or floats.

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, "not a number", 6]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats


All the rows in ``matrix`` must be the same size. If any rows are
of different sizes, a TypeError is raised.

    >>> matrix = [
    ...     [1, 2, 3, 4],
    ...     [5, 6, 7]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size


Invalid Divisors
================

The parameter ``div`` must be either an integer or float. Otherwise, a 
TypeError is raised.

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, "not a number"))
    Traceback (most recent call last):
    TypeError: div must be a number


    >>> print(matrix_divided(matrix, None))
    Traceback (most recent call last):
    TypeError: div must be a number


``div`` must also be non-zero, otherwise, a ZeroDivisionError is raised.

    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

